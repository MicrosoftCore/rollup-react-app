export function MyPlugin(a, b, c, d) {
    return {
        augmentChunkHash(a, b, c, d) {
            console.log(a, b, c, d);
        },
        buildStart(options) {
            // PluginContext
            // => void | Promise<void>
            console.log(options);
        },
        buildEnd(a, b, c, d) {
            console.log('buildEnd');
        },
        closeBundle(a, b, c, d) {
            console.log(a, b, c, d);
        },
        closeWatcher(a, b, c, d) {
            console.log(a, b, c, d);
        },
        generateBundle(a, b, c, d) {
            console.log(a, b, c, d);
        },
        load(id) {
            // PluginContext
            // => LoadResult | Promise<LoadResult>
            console.log(id);
        },
        moduleParsed(info) {
            // PluginContext
            // => void | Promise<void>
            console.log(info);
        },
        onLog(a, b, c, d) {
            console.log(a, b, c, d);
        },
        options(options) {
            // MinimalPluginContext
            // => (InputOptions | NullValue) | Promise<InputOptions | NullValue>
            console.log(options);
        },
        outputOptions(a, b, c, d) {
            console.log(a, b, c, d);
        },
        renderChunk(a, b, c, d) {
            console.log(a, b, c, d);
        },
        renderDynamicImport(a, b, c, d) {
            console.log(a, b, c, d);
        },
        renderError(a, b, c, d) {
            console.log(a, b, c, d);
        },
        renderStart(a, b, c, d) {
            console.log(a, b, c, d);
        },
        resolveDynamicImport(a, b, c, d) {
            console.log(a, b, c, d);
        },
        resolveFileUrl(a, b, c, d) {
            console.log(a, b, c, d);
        },
        resolveId(source, importer, options) {
            // PluginContext 
            // => ResolveIdResult | Promise<ResolveIdResult>
            console.log(source, importer, options);
        },
        resolveImportMeta(a, b, c, d) {
            console.log(a, b, c, d);
        },
        shouldTransformCachedModule(a, b, c, d) {
            console.log(a, b, c, d);
        },
        transform(code, id) {
            // TransformPluginContext
            // => TransformResult | Promise<TransformResult>
            console.log(code, id);
        },
        watchChange(a, b, c, d) {
            console.log(a, b, c, d);
        },
        writeBundle(a, b, c, d) {
            console.log(a, b, c, d);
        }
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9wbHVnaW5zL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sVUFBVSxRQUFRLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztJQUMvQixPQUFPO1FBQ0gsZ0JBQWdCLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztZQUN2QixPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzVCLENBQUM7UUFDRCxVQUFVLENBQUMsT0FBTztZQUNkLGdCQUFnQjtZQUNoQiwwQkFBMEI7WUFDMUIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN6QixDQUFDO1FBQ0QsUUFBUSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7WUFDZixPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQzVCLENBQUM7UUFDRCxXQUFXLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztZQUNsQixPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzVCLENBQUM7UUFDRCxZQUFZLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztZQUNuQixPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzVCLENBQUM7UUFDRCxjQUFjLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztZQUNyQixPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzVCLENB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O1lBQ3pCLGdEQUFnRDtZQUNoRCxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztRQUMxQixDQUFDO1FBQ0QsV0FBVyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7WUFDbEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUM1QixDQUFDO1FBQ0QsV0FBVyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7WUFDbEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUM1QixDQUFDO0tBQ0osQ0FBQTtBQUNMLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQbHVnaW4gfSBmcm9tICdyb2xsdXAnO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIE15UGx1Z2luKGEsIGIsIGMsIGQpOiBQbHVnaW4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBhdWdtZW50Q2h1bmtIYXNoKGEsIGIsIGMsIGQpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coYSwgYiwgYywgZCk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBidWlsZFN0YXJ0KG9wdGlvbnMpIHtcclxuICAgICAgICAgICAgLy8gUGx1Z2luQ29udGV4dFxyXG4gICAgICAgICAgICAvLyA9PiB2b2lkIHwgUHJvbWlzZTx2b2lkPlxyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhvcHRpb25zKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGJ1aWxkRW5kKGEsIGIsIGMsIGQpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coJ2J1aWxkRW5kJyk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBjbG9zZUJ1bmRsZShhLCBiLCBjLCBkKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGEsIGIsIGMsIGQpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgY2xvc2VXYXRjaGVyKGEsIGIsIGMsIGQpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coYSwgYiwgYywgZCk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBnZW5lcmF0ZUJ1bmRsZShhLCBiLCBjLCBkKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGEsIGIsIGMsIGQpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbG9hZChpZCkge1xyXG4gICAgICAgICAgICAvLyBQbHVnaW5Db250ZXh0XHJcbiAgICAgICAgICAgIC8vID0+IExvYWRSZXN1bHQgfCBQcm9taXNlPExvYWRSZXN1bHQ+XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGlkKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIG1vZHVsZVBhcnNlZChpbmZvKSB7XHJcbiAgICAgICAgICAgIC8vIFBsdWdpbkNvbnRleHRcclxuICAgICAgICAgICAgLy8gPT4gdm9pZCB8IFByb21pc2U8dm9pZD5cclxuICAgICAgICAgICAgY29uc29sZS5sb2coaW5mbyk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBvbkxvZyhhLCBiLCBjLCBkKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGEsIGIsIGMsIGQpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb3B0aW9ucyhvcHRpb25zKSB7XHJcbiAgICAgICAgICAgIC8vIE1pbmltYWxQbHVnaW5Db250ZXh0XHJcbiAgICAgICAgICAgIC8vID0+IChJbnB1dE9wdGlvbnMgfCBOdWxsVmFsdWUpIHwgUHJvbWlzZTxJbnB1dE9wdGlvbnMgfCBOdWxsVmFsdWU+XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKG9wdGlvbnMpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb3V0cHV0T3B0aW9ucyhhLCBiLCBjLCBkKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGEsIGIsIGMsIGQpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcmVuZGVyQ2h1bmsoYSwgYiwgYywgZCkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhhLCBiLCBjLCBkKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHJlbmRlckR5bmFtaWNJbXBvcnQoYSwgYiwgYywgZCkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhhLCBiLCBjLCBkKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHJlbmRlckVycm9yKGEsIGIsIGMsIGQpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coYSwgYiwgYywgZCk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICByZW5kZXJTdGFydChhLCBiLCBjLCBkKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGEsIGIsIGMsIGQpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcmVzb2x2ZUR5bmFtaWNJbXBvcnQoYSwgYiwgYywgZCkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhhLCBiLCBjLCBkKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHJlc29sdmVGaWxlVXJsKGEsIGIsIGMsIGQpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coYSwgYiwgYywgZCk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICByZXNvbHZlSWQoc291cmNlLCBpbXBvcnRlciwgb3B0aW9ucykge1xyXG4gICAgICAgICAgICAvLyBQbHVnaW5Db250ZXh0IFxyXG4gICAgICAgICAgICAvLyA9PiBSZXNvbHZlSWRSZXN1bHQgfCBQcm9taXNlPFJlc29sdmVJZFJlc3VsdD5cclxuICAgICAgICAgICAgY29uc29sZS5sb2coc291cmNlLCBpbXBvcnRlciwgb3B0aW9ucyk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICByZXNvbHZlSW1wb3J0TWV0YShhLCBiLCBjLCBkKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGEsIGIsIGMsIGQpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2hvdWxkVHJhbnNmb3JtQ2FjaGVkTW9kdWxlKGEsIGIsIGMsIGQpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coYSwgYiwgYywgZCk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICB0cmFuc2Zvcm0oY29kZSwgaWQpIHtcclxuICAgICAgICAgICAgLy8gVHJhbnNmb3JtUGx1Z2luQ29udGV4dFxyXG4gICAgICAgICAgICAvLyA9PiBUcmFuc2Zvcm1SZXN1bHQgfCBQcm9taXNlPFRyYW5zZm9ybVJlc3VsdD5cclxuICAgICAgICAgICAgY29uc29sZS5sb2coY29kZSwgaWQpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgd2F0Y2hDaGFuZ2UoYSwgYiwgYywgZCkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhhLCBiLCBjLCBkKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHdyaXRlQnVuZGxlKGEsIGIsIGMsIGQpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coYSwgYiwgYywgZCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59Il19